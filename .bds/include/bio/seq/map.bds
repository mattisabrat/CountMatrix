#!/usr/bin/env bds

#-------------------------------------------------------------------------------
# Mapping reads
#
# Performance tunning parameters
# Required variables:
#    cpusMapping   : Number of CPUs to use in each mapping process
#    mapSortMemory : Memory used while sorting BAM file (samtools sort)
#    minMapQ       : Minimum mapping quality filter (0 means no filter)
#
#															Pablo Cingolani 2014
#-------------------------------------------------------------------------------

include 'annotate'
include 'fastq'
include 'gatk'

# Performance parameters
cpusMapping     := (system == 'local' ? cpusLocal : 4)		help Number of CPUs to use in each mapping process
mapSortMemory   := 2 * G									help Memory used while sorting BAM files (samtools sort)
minMapQ			:= 1										help Minimum mapping quality

# Parameters
readGroupId     := "ReadGroupId"							help Read group ID used in BAM files
libraryId       := "LibraryId"								help Library ID used in BAM files
platform        := "illumina"								help Sequencing platform name used in BAM files
sampleId        := "SampleId"								help Sample ID used in BAM files
readGroupString := "@RG\tID:$readGroupId\tLB:$libraryId\tPL:$platform\tSM:$sampleId"

#-------------------------------------------------------------------------------
# Find all chromosome names (from BAM headers)
#-------------------------------------------------------------------------------
string[] bamChrNames(string[] bams) {
	bamHead := bams.head().swapExt(".bam", ".header")
	bamHead.delete()

	# Dump all headers to 'bamHead'
	for( string bam : bams ) sys samtools view -H $bam >> $bamHead

	# Find chrosomome names (@SQ in SAM header)
	chrNames := sys cat $bamHead | grep "^@SQ" | tr "\t" "\n" | grep "^SN" | cut -f 2 -d : | sort | uniq
	return( chrNames.lines() )
}

#-------------------------------------------------------------------------------
# Index BAM file
#-------------------------------------------------------------------------------
string indexBam(string bam) {
	bai := bam + ".bai"
	task( bai <- bam, cpus := 1) sys samtools index $bam
	bai.rmOnExit()
	return( bai )
}

#-------------------------------------------------------------------------------
# Map reads to genome (split into smaller files)
#-------------------------------------------------------------------------------
string[] mapSplit(string referenceFasta, string fq1, string fq2, int splitNumReads) {
	string[] fq1split, fq2split

	# Make sure GATK indeces are ready
	gatkPrepare(referenceFasta)

	#---
	# Split files 
	#---
	if( splitNumReads > 0 ) {
		print("Splitting fastq files\n")
		splitFatsq(fq1, splitNumReads)
		splitFatsq(fq2, splitNumReads)
		wait

		# Get split files (we can only get names after split is finished)
		fq1split = splitFatsqNames( fq1 )
		fq2split = splitFatsqNames( fq2 )
		print("Fastq splits:\n\t$fq1split\n\t$fq2split\n")
	} else {
		print("Local mapping: No split fastq splitting required\n")
		# Do not split files (e.g. if we are running on a local computer)
		fq1split = [ fq1 ]
		fq2split = [ fq2 ]
		cpusMapping = cpusLocal	# Use all available cpus
	}

	#---
	# Map each pair of FASTQ files
	#---
	string[] bams
	for( int i=0 ; i < fq1split.size() ; i++ ) {
		fqs1 := fq1split[i]
		fqs2 := ""
		if( fq2split )  fqs2 = fq2split[i]

		bam := mapSingle(referenceFasta, fqs1, fqs2)
		bams.add( bam )
	}

	return( bams );
}

#-------------------------------------------------------------------------------
# Map reads, call variants and annotate them
#-------------------------------------------------------------------------------
string[] mapCallAnnotate(string referenceFasta, string fq1, string fq2, string genome, int splitNumReads, int numCallers) {
	string[] bams, rdbams
	bam := removeExtFastqa(fq1) + ".rmdup.bam"
	vcf := removeExtFastqa(fq1) + ".vcf"

	# Create BAM file from reads
	if( vcf <- [fq1, fq2] ) {
		mapIndex(referenceFasta)

		# Split fastq files
		if( system == "local" )	splitNumReads = 0
		bams = mapSplit(referenceFasta, fq1, fq2, splitNumReads)
		bams.rmOnExit()

		# Wait until genome index finished and fastq files are split
		wait

		# Remove duplicates: Return one BAM per chromosome
		rdbams = rmDup( bams )
		rdbams.rmOnExit()
	
		# Callable loci: One BED per chromosome
		beds := callableRegions(referenceFasta, rdbams )
		beds.rmOnExit()
		wait

		# Split each BED to call multiple callers on each chromosome
		string[] vcfsAll
		for(int i=0 ; i < rdbams.size() ; i++ ) {
			rdbam := rdbams[i]
			bed := beds[i]

			# Split BED by similar callable loci
			bedSplits := splitCallableRegions(bed, numCallers)
			bedSplits.rmOnExit()
        
			# Call variants on each region
			vcfs := haplotypeCaller( referenceFasta, rdbam, bedSplits)
			vcfs.rmOnExit()
			vcfsAll.add( vcfs )
		}

		# Join variants results
		joinVcf(vcf, vcfsAll )
	}
	
	# Annotate file
	vcfEff := annotate( vcf, genome )

	return( [ bams.join(','), rdbams.join(','), vcf, vcfEff ] )
}

#-------------------------------------------------------------------------------
# Index genome (prepare for mapping reads)
#-------------------------------------------------------------------------------
void mapIndex(string fasta) {
	indexFile := fasta + ".bwt"
	task( indexFile <- fasta, cpus := cpusMapping ) sys bwa index $fasta
}

#-------------------------------------------------------------------------------
# Map reads to genome (single file, no splitting)
#-------------------------------------------------------------------------------
string mapSingle(string referenceFasta, string fq1, string fq2) {
	bamBase := removeExtFastqa(fq1) 
	bam := bamBase + ".bam"
	print("Mapping:\t$fqs1\t$fqs2\t=>\t$bam\n")
	task( bam <- [fq1, fq2] , cpus := cpusMapping ) sys bwa mem -R '$readGroupString' -t $cpusMapping $referenceFasta $fq1 $fq2 | grep -v "^@PG" | samtools view -S -q $minMapQ -u - | samtools sort -@ $cpus -m $mapSortMemory - $bamBase
	return( bam )
}

#-------------------------------------------------------------------------------
# Remove duplicates from several BAMs
#-------------------------------------------------------------------------------
string[] rmDup(string[] bams) {

	# Find all chromosome names (from BAM headers)
	chrs := bamChrNames( bams )	

	string[] deps
	deps.add( bams )

	# Index all BAM files
	for(string bam : bams) deps.add( indexBam( bam ) )

	# Remove duplicates (split load by chromosome)
	bamsStr := bams.join(' ')
	string[] bamsChr
	for( string chr : chrs ) {
		bamchr := bams.head().swapExt( ".bam", ".$chr.rmdup.bam" )
		bamsChr.add( bamchr )

		# Merge sorted BAM files and remove duplicates (for chromosome 'chr')
		print("Merging and removing duplicates in BAM file: $bamchr\n")
		if( bams.size() > 1 ) task( bamchr <- deps, cpus := cpusMapping ) sys samtools merge -f -R $chr -@ $cpusMapping - $bamsStr | samtools rmdup - $bamchr
		else task( bamchr <- deps, cpus := cpusMapping ) sys samtools view -b $bamsStr $chr | samtools rmdup - $bamchr
	}

	return( bamsChr )
}

