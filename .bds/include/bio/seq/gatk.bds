#!/usr/bin/env bds

#-------------------------------------------------------------------------------
# GATK & Picard basics
#
#															Pablo Cingolani 2014
#-------------------------------------------------------------------------------

include 'bio/seq/java'

# Parameters
cpusCalling           := 2                                                     help Number of CPUs to use in each calling process

# Programs
gatkJar               := "$HOME/tools/gatk/GenomeAnalysisTK.jar"				help Path to GATK's JAR file
picardPath            := "$HOME/tools/picard/picard.jar"						help Path to Picard
callableCollapseSplit := "$HOME/.bds/include/bio/seq/callableCollapseSplit.py"	help Path to script used to calculate callable sets. 

#-------------------------------------------------------------------------------
# Calculate callable regions
#-------------------------------------------------------------------------------
string[] callableRegions(string referenceFasta, string[] bams) {
	string[] beds;
	for( string bam : bams ) {
		bed := bam.swapExt(".bam", ".callable.bed")
		summary := bam.swapExt(".bam", ".callable.txt")
		beds.add( bed )

		print("Callable regions: $bed\n")
		task( bed <- [ bam, indexBam(bam) ], cpus := cpusCalling ) sys $java -jar $gatkJar -T CallableLoci -R $referenceFasta -I $bam -summary $summary -o $bed
	}

	return( beds )
}

#-------------------------------------------------------------------------------
# In order to use GATK, we need to prepare the reference genome
#-------------------------------------------------------------------------------
string[] gatkPrepare(string fasta) {
	fai := fasta + ".fai"
	dict := removeExtFastqa(fasta) + ".dict"

	if( dict <- fasta ) {
		print("Creating dictionary file: $dict\n")
		task $java -jar $picardPath CreateSequenceDictionary R= $fasta O= $dict
	}

	if( fai <- fasta ) {
		print("Creating fasta idex: $fai\n")
		task samtools faidx $fasta
	}

	return( [fai, dict] )
}

#-------------------------------------------------------------------------------
# Call variants using GATKâ€™s Haplotype Caller
#-------------------------------------------------------------------------------
string[] haplotypeCaller(string referenceFasta, string bam, string[] callableRegions) {
	string[] vcfs

	# Invoke HaplotypeCaller on each split of callable regions
	print("HaplotypeCaller:\n")
	print("callableRegions: $callableRegions\n")
	for( string callableRegion : callableRegions ) {
		# Note: Ther might less callable region files than we expect
		# If the file exists, we call in it
		if( callableRegion.exists() && (callableRegion.size() > 0)) {
			print("\t$callableRegion\n")

			callableRegionVcf := callableRegion.swapExt(".bed", ".vcf")
			vcfs.add( callableRegionVcf )

			# Invoke GATK's HaplotypeCaller
			task( callableRegionVcf <- [bam, callableRegion] , cpus := cpusCalling ) sys $java -jar $gatkJar -T HaplotypeCaller -R $referenceFasta -I $bam -stand_call_conf 50.0 -stand_emit_conf 10.0 -L $callableRegion -o $callableRegionVcf
		}
	}
	return( vcfs ) 
}

#-------------------------------------------------------------------------------
# Split callable regions BED file into equal 'num' equal parts
#-------------------------------------------------------------------------------
string[] splitCallableRegions(string bed, int num) {
	print("Split callable regions: $bed\n")
	bedOk := bed.swapExt(".bed", ".ok.bed")
	bedSplit := bed.swapExt(".bed", ".ok.split")

	# Create a list of names for split bed files
	string[] bedSplits
	for( int i=0 ; i < num ; i++ ) {
		b :=  bedSplit + ".$i.bed"
		print("\t$b\n")
		bedSplits.add( b )
	}
	bedSplitsStr := bedSplits.join(' ')

	# We may get less splits than requested (e.g. request 1000, but we only get 50).
	# This is why I only check against the first one
	if( bedSplits[0] <- bed ) sys grep CALLABLE $bed | $callableCollapseSplit $bedSplitsStr

	return( bedSplits ) # Report all file names after split
}

